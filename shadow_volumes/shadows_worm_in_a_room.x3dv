#X3D V3.2 utf8
PROFILE Interchange

# Demo of dynamic shadow volumes by Castle Game Engine:
# - Light source moves.
# - Worm has animated coordinates.
# - Spheres/boxes have animated transformation.
# And shadows work, everything is both shadow caster and receiver.
# Press 's' (handled by KeySensor) to turn shadows on/off.

EXTERNPROTO KambiAppearance [
  inputOutput SFNode material
  inputOutput SFNode texture
  inputOutput SFNode textureTransform
  inputOutput SFNode fillProperties
  inputOutput SFNode lineProperties
  inputOutput SFNode metadata
  inputOutput MFNode shaders
  inputOutput SFNode normalMap
  inputOutput SFNode heightMap
  inputOutput SFFloat heightMapScale
  inputOutput SFNode blendMode
  inputOutput SFBool shadowCaster
] [ "urn:castle-engine.sourceforge.net:node:KambiAppearance",
    "http://castle-engine.sourceforge.net/fallback_prototypes.x3dv#KambiAppearance"
]

# Camera settings "encoded" in the VRML declaration below :
# direction -0.0039148419164121 -0.0134819848462939 -0.01424465700984
# up -0.1786381602287292 0.7386409640312194 -0.6499983668327331
# gravityUp 0 1 0
Viewpoint {
  position -0.5356798768043518 0.699147880077362 0.5529592037200927
  orientation -0.9368800520896911 0.3260054588317871 0.1263976395130157 0.784756064414978
}

NavigationInfo {
  type [ "FLY" "ANY" ]
}

Shape{
  geometry Box { size 2.4 2.4 2.4 ccw FALSE }
  appearance Appearance { material Material { } }
}

Transform {
  scale 0.1 0.1 0.1
  translation -0.5 0 -0.5
  rotation 0 0 1 1.57
  children Inline { url "../animation/simple_tests_interpolation_and_time/worm_crawl.x3dv" }
}

# light source ---------------------------------------------------------------

DEF Light PointLight {
  location 0 1 0
  shadowVolumes TRUE
  shadowVolumesMain TRUE
}
DEF LightIndicator Transform {
  translation 0 1 0
  children Shape {
    geometry Sphere { radius 0.1 }
    # This sphere must not be a shadow caster,
    # otherwise the whole scene could be in shadow
    # (actually, it will not necessarily happen due to silhouette optimizations,
    # but still...).
    appearance KambiAppearance {
      material Material { diffuseColor 1 1 0 }
      shadowCaster FALSE
    }
  }
}
DEF Timer TimeSensor { loop TRUE }

DEF KeySens KeySensor { }

DEF Scr Script {
  inputOnly SFTime time
  outputOnly SFVec3f mainLightLoc

  inputOnly SFString keyPress
  inputOutput SFBool shadows TRUE

  url "castlescript:

{ We animate light location by script, as opposed to placing light within
  a transform and rotating that transform. The reason is historic:
  animating light's transform was not optimized as well as it should be
  in Castle Game Engine. This is fixed in Castle Game Engine since a long time,
  and we could as well reimplement it now using Transform to rotate. }

function time(value, timestamp)
  mainLightLoc := vector(
    sin(value) * 0.3,
    1,
    cos(value) * 0.3)

function keyPress(value, timestamp)
  when (value = 's', shadows := not(shadows))
"
}
ROUTE Timer.time TO Scr.time
ROUTE Scr.mainLightLoc TO Light.location
ROUTE Scr.mainLightLoc TO LightIndicator.translation

ROUTE KeySens.keyPress TO Scr.keyPress
ROUTE Scr.shadows TO Light.shadowVolumes

# yellow sphere under worm ----------------------------------------------

DEF TimerYellow TimeSensor { loop TRUE cycleInterval 5 }
DEF InterpYellow OrientationInterpolator {
  key      [ 0 1 ]
  keyValue [ 0 1 0 0, 0 1 0 6.2831853072 ] # to 2*pi
}

DEF SpYellow Transform {
  translation -0.5 -0.5 -0.5
  children Transform {
    translation 0.3 0 0
    children [
      Shape {
        appearance Appearance { material Material { diffuseColor 1 1 0 } }
        geometry Sphere { radius 0.1 } }
    ] } }

ROUTE TimerYellow.fraction_changed TO InterpYellow.set_fraction
ROUTE InterpYellow.value_changed TO SpYellow.rotation

# blue sphere under worm ----------------------------------------------

DEF TimerBlue TimeSensor { loop TRUE cycleInterval 3 }
DEF InterpBlue OrientationInterpolator {
  key      [ 0 1 ]
  keyValue [ 0 1 0 0, 0 1 0 6.2831853072 ] # to 2*pi
}

DEF SpBlue Transform {
  translation -0.5 -0.7 -0.5
  children Transform {
    translation 0.4 0 0
    children [
      Shape {
        appearance KambiAppearance { material Material { diffuseColor 0.1 0.1 1
          transparency 0.5 }
          blendMode BlendMode { srcFactor "SRC_ALPHA" }
        }
        geometry Sphere { radius 0.15 } }
    ] } }

ROUTE TimerBlue.fraction_changed TO InterpBlue.set_fraction
ROUTE InterpBlue.value_changed TO SpBlue.rotation

# red box under worm ----------------------------------------------

DEF TimerRed TimeSensor { loop TRUE cycleInterval 3 }
DEF InterpRed OrientationInterpolator {
  key      [ 0 1 ]
  keyValue [ 1 1 1 0, 1 1 1 6.2831853072 ] # to 2*pi
}

DEF BoxRed Transform {
  translation -0.5 0.3 -0.7
  children Transform {
    children [
      Shape {
        appearance KambiAppearance {
          material Material { diffuseColor 1 0.1 0.1
            transparency 0.5 }
          blendMode BlendMode { srcFactor "SRC_ALPHA" }
        }
        geometry Box { size 0.2 0.2 0.2 } }
    ] } }

ROUTE TimerRed.fraction_changed TO InterpRed.set_fraction
ROUTE InterpRed.value_changed TO BoxRed.rotation
