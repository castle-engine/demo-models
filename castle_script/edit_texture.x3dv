#X3D V3.2 utf8
PROFILE Interchange

# Fun with texture editing from CastleScript.
# Done as a demo of CastleScript capabilities to get/set image contents.
#
# Original texture image must have size 256x256 and must have 4 components
# for this demo to work nicely.
# Reasons:
# - Size 256x256 must be corresponding to IndexedFaceSet size,
#   to have 3D cursor moving in 3D space synchronized with texture pixel
#   coordinates (since we use cursor 3D position to take texture coordinates
#   to edit)
# - Components must be 4 because our simple script in CastleScript
#   assumes this (it's possible to write more universal program in
#   CastleScript, as you can query image_components(), but I was too lazy
#   to use this.)

EXTERNPROTO KambiAppearance [
  inputOutput SFNode material
  inputOutput SFNode texture
  inputOutput SFNode textureTransform
  inputOutput SFNode fillProperties
  inputOutput SFNode lineProperties
  inputOutput SFNode metadata
  inputOutput MFNode shaders
  inputOutput SFNode normalMap
  inputOutput SFNode heightMap
  inputOutput SFFloat heightMapScale
  inputOutput SFNode blendMode
  inputOutput SFBool shadowCaster
] [ "urn:castle-engine.sourceforge.net:node:KambiAppearance",
    "http://castle-engine.sourceforge.net/fallback_prototypes.x3dv#KambiAppearance"
]

Shape {
  appearance KambiAppearance {
    texture DEF Tex PixelTexture {
      # Initial texture contents are opaque, but our script may modify
      # the alpha channel to make it more interesting (press "e").
      # To make this work reliably, force texture rendering using blending.
      # See http://castle-engine.sourceforge.net/x3d_extensions.php#section_ext_alpha_channel_detection
      alphaChannel "BLENDING"
    }
    # Force blending mode according to default BlendMode values,
    # in particular destFactor "ONE_MINUS_SRC_ALPHA".
    blendMode BlendMode { }
  }
  geometry IndexedFaceSet {
    solid FALSE
    coord Coordinate { point [ 0 0 0, 256 0 0, 256 256 0, 0 256 0 ] }
    coordIndex [ 0 1 2 3 ]
    texCoord TextureCoordinate { point [ 0 0, 1 0, 1 1, 0 1 ] }
  }
}

DEF CrossHair Transform {
  children Shape {
    appearance Appearance { material Material { emissiveColor 1 1 0 } }
    geometry Circle2D {
      radius 20
    }
  }
}

DEF Scr Script {
  inputOutput SFVec3f crosshair_pos 128 128 10
  outputOnly SFImage tex
  inputOnly SFInt32 action_key_press
  inputOnly SFString key_press

  # consts for key_press
  initializeOnly SFInt32 radius 20
  initializeOnly SFInt32 smooth_size 3

  # helper vars for key_press
  initializeOnly SFInt32 crosshair_x 0
  initializeOnly SFInt32 crosshair_y 0
  initializeOnly SFInt32 i 0
  initializeOnly SFInt32 j 0
  initializeOnly SFInt32 k 0
  initializeOnly SFInt32 l 0
  initializeOnly SFColor col 0 0 0
  initializeOnly SFImage new_image 0 0 1
  initializeOnly SFFloat gradient_x 0
  initializeOnly SFFloat gradient_y 0
  initializeOnly SFFloat gradient_len 0

  url [
"castlescript:

function initialize(timestamp)
  { Dummy assignment to set initial CrossHair.translation }
  crosshair_pos := crosshair_pos;
  { Load initial texture. We had to use PixelTexture for this
    (ImageTexture doesn't give us SFImage field to work with),
    so loading it must be done from script. }
  tex := image_load('../textures/test_texture.png')

function action_key_press(value, timestamp)
  if (value = ACTION_KEY_UP,
    vector_set(crosshair_pos, 1, vector_get(crosshair_pos, 1) + 3),
  if (value = ACTION_KEY_DOWN,
    vector_set(crosshair_pos, 1, vector_get(crosshair_pos, 1) - 3),
  if (value = ACTION_KEY_RIGHT,
    vector_set(crosshair_pos, 0, vector_get(crosshair_pos, 0) + 3),
  when (value = ACTION_KEY_LEFT,
    vector_set(crosshair_pos, 0, vector_get(crosshair_pos, 0) - 3)
  ))))

function key_press(value, timestamp)
  crosshair_x := round(vector_get(crosshair_pos, 0));
  crosshair_y := round(vector_get(crosshair_pos, 1));

  when (value = 'c',
    for (i, max(crosshair_x - radius, 0),
            min(crosshair_x + radius, image_width(tex) - 1),
      for (j, max(crosshair_y - radius, 0),
              min(crosshair_y + radius, image_height(tex) - 1),
        when( sqr(crosshair_x - i) +
              sqr(crosshair_y - j) < sqr(radius),
          image_set_color(tex, i, j,
            image_get_color(tex, i, j) - vector(0.2, 0.2, 0.2))))));

  when (value = 'C',
    for (i, max(crosshair_x - radius, 0),
            min(crosshair_x + radius, image_width(tex) - 1),
      for (j, max(crosshair_y - radius, 0),
              min(crosshair_y + radius, image_height(tex) - 1),
        when( sqr(crosshair_x - i) +
              sqr(crosshair_y - j) < sqr(radius),
          image_set_color(tex, i, j,
            image_get_color(tex, i, j) + vector(0.2, 0.2, 0.2))))));

  when (value = 'a',
    for (i, max(crosshair_x - radius, 0),
            min(crosshair_x + radius, image_width(tex) - 1),
      for (j, max(crosshair_y - radius, 0),
              min(crosshair_y + radius, image_height(tex) - 1),
        when( sqr(crosshair_x - i) +
              sqr(crosshair_y - j) < sqr(radius),
          image_set_alpha(tex, i, j,
            image_get_alpha(tex, i, j) - 0.2 )))));

  when (value = 'A',
    for (i, max(crosshair_x - radius, 0),
            min(crosshair_x + radius, image_width(tex) - 1),
      for (j, max(crosshair_y - radius, 0),
              min(crosshair_y + radius, image_height(tex) - 1),
        when( sqr(crosshair_x - i) +
              sqr(crosshair_y - j) < sqr(radius),
          image_set_alpha(tex, i, j,
            image_get_alpha(tex, i, j) + 0.2 )))));

  when (value = 's',
    { Smoothing changes new_image, taking pixels from original tex,
      this way we don't take partially smoothed colors into account when
      calculating new smoothed colors. }
    new_image := tex;
    for (i, max(crosshair_x - radius, 0),
            min(crosshair_x + radius, image_width(tex) - 1),
      for (j, max(crosshair_y - radius, 0),
              min(crosshair_y + radius, image_height(tex) - 1),
        when( sqr(crosshair_x - i) +
              sqr(crosshair_y - j) < sqr(radius),
          { smooth pixel (i, j) }
          col := vector(0, 0, 0);
          for (k, max(i - smooth_size , 0),
                  min(i + smooth_size, image_width(tex) - 1),
            for (l, max(j - smooth_size, 0),
                    min(j + smooth_size, image_height(tex) - 1),
              col := col + image_get_color(tex, k, l) / sqr(2*smooth_size+1)));
          image_set_color(new_image, i, j, col))));
    tex := new_image);

  when (value = 'e',
    { A simple edge-detection by calculating gradient (actually,
      the length of the gradient vector) with Sobel operator, in CastleScript.
      See [http://en.wikipedia.org/wiki/Sobel_operator].
      See also another CastleScript implementation in
      castle_game_engine/examples/castlescript/mkimage_sobel_edge.castlescript }

    { copy tex, to copy it's size and alpha channel }
    new_image := tex;

    for (i, 0, image_width(new_image) - 1,
      for (j, 0, image_height(new_image) - 1,
        gradient_x :=
          if(i > 0,
            if (j > 0, grayscale(image_get_color(tex, i-1, j-1)), 0) +
            2 * grayscale(image_get_color(tex, i-1, j)) +
            if (j < image_height(new_image) - 1, grayscale(image_get_color(tex, i-1, j+1)), 0),
            0) -
          if(i < image_width(new_image) - 1,
            if (j > 0, grayscale(image_get_color(tex, i+1, j-1)), 0) +
            2 * grayscale(image_get_color(tex, i+1, j)) +
            if (j < image_height(new_image) - 1, grayscale(image_get_color(tex, i+1, j+1)), 0),
            0);
        gradient_y :=
          if(j > 0,
            if (i > 0, grayscale(image_get_color(tex, i-1, j-1)), 0) +
            2 * grayscale(image_get_color(tex, i, j-1)) +
            if (i < image_width(new_image) - 1, grayscale(image_get_color(tex, i+1, j-1)), 0),
            0) -
          if(j < image_height(new_image) - 1,
            if (i > 0, grayscale(image_get_color(tex, i-1, j+1)), 0) +
            2 * grayscale(image_get_color(tex, i, j+1)) +
            if (i < image_width(new_image) - 1, grayscale(image_get_color(tex, i+1, j+1)), 0),
            0);
        gradient_len := sqrt(sqr(gradient_x) + sqr(gradient_y));
        image_set_color(new_image, i, j, vector(gradient_len, gradient_len, gradient_len))));

    tex := new_image)
"
  ]
}

ROUTE Scr.crosshair_pos TO CrossHair.translation
ROUTE Scr.tex TO Tex.image

DEF K KeySensor { }
ROUTE K.actionKeyPress TO Scr.action_key_press
ROUTE K.keyPress TO Scr.key_press

# Camera settings "encoded" in the VRML declaration below :
# direction 0 0 -0.0199999995529651
# up 0 1 4.3711388286737929E-008
# gravityUp 0 1 0
Viewpoint {
  position 131.54255676269531 90.592330932617188 474.99456787109375
  orientation 0 0 1 0
}

NavigationInfo {
  type "NONE"
  avatarSize [ 10 ]
}

Transform {
  translation 128 -15 2
  children Shape {
    appearance Appearance { material Material { diffuseColor 1 1 0 } }
    geometry Text { string [
      "A toy in pure X3D using Script (in CastleScript language)"
      "to edit the texture (X3D SFImage field)."
      "Arrows move the cursor. 'c' / 'C' darken / lighten color."
      "'a' / 'A' decrease / increase alpha (opacity)."
      "'s' smooths the image. 'e' makes edge detection."
      ]
      fontStyle FontStyle { size 20 justify "MIDDLE" }
    }
  }
}

# checkerboard background

Shape {
  appearance Appearance {
    texture PixelTexture { image 2 2 1 0 0xFF 0xFF 0
      textureProperties TextureProperties {
        magnificationFilter "NEAREST_PIXEL"
        minificationFilter "NEAREST_PIXEL"
      }
    }
    textureTransform TextureTransform {
      scale 20 20
    }
  }
  geometry IndexedFaceSet {
    solid FALSE
    coord Coordinate { point [ -128 0 -10, 384 0 -10, 384 384 -10, -128 384 -10 ] }
    coordIndex [ 0 1 2 3 ]
    texCoord TextureCoordinate { point [ 0 0, 1 0, 1 1, 0 1 ] }
  }
}
