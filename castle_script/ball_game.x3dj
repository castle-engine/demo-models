{ "X3D": {
    "encoding": "UTF-8",
    "@profile": "Interchange",
    "@version": "4.0",
    "@xsd:noNamespaceSchemaLocation": "https://www.web3d.org/specifications/x3d-4.0.xsd",
    "JSON schema": "https://www.web3d.org/specifications/x3d-4.0-JSONSchema.json",
    "head": {
      "meta": [
        {
          "@name": "generator",
          "@content": "x3d-tidy V2.1.21, https://www.npmjs.com/package/x3d-tidy"
        },
        {
          "@name": "modified",
          "@content": "Tue, 12 Aug 2025 06:21:02 GMT"
        }
      ]
    },
    "Scene": {
      "-children": [
        { "Script":
          {
            "@DEF": "Scr",
            "field": [
              {
                "@accessType": "inputOutput",
                "@type": "SFVec3f",
                "@name": "player_1_pos",
                "@value": [ 8.5, 0, 0 ]
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFVec3f",
                "@name": "player_1_speed"
              },
              {
                "@accessType": "inputOutput",
                "@type": "SFVec3f",
                "@name": "player_2_pos",
                "@value": [ -8.5, 0, 0 ]
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFVec3f",
                "@name": "player_2_speed"
              },
              {
                "@accessType": "inputOutput",
                "@type": "SFVec3f",
                "@name": "ball_pos"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFVec3f",
                "@name": "ball_speed"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFTime",
                "@name": "previousTime"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFTime",
                "@name": "timeDiff",
                "@value": 0
              },
              {
                "@accessType": "inputOnly",
                "@type": "SFTime",
                "@name": "time"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFBool",
                "@name": "pressed_down"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFBool",
                "@name": "pressed_up"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFBool",
                "@name": "pressed_left"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFBool",
                "@name": "pressed_right"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFBool",
                "@name": "pressed_a"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFBool",
                "@name": "pressed_w"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFBool",
                "@name": "pressed_s"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFBool",
                "@name": "pressed_d"
              },
              {
                "@accessType": "inputOnly",
                "@type": "SFInt32",
                "@name": "action_key_press"
              },
              {
                "@accessType": "inputOnly",
                "@type": "SFInt32",
                "@name": "action_key_release"
              },
              {
                "@accessType": "inputOnly",
                "@type": "SFString",
                "@name": "key_press"
              },
              {
                "@accessType": "inputOnly",
                "@type": "SFString",
                "@name": "key_release"
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFFloat",
                "@name": "x_size",
                "@value": 12
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFFloat",
                "@name": "y_size",
                "@value": 8
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFFloat",
                "@name": "player_radius",
                "@value": 3
              },
              {
                "@accessType": "initializeOnly",
                "@type": "SFFloat",
                "@name": "ball_radius",
                "@value": 1
              },
              {
                "@accessType": "inputOutput",
                "@type": "SFInt32",
                "@name": "player_1_score"
              },
              {
                "@accessType": "inputOutput",
                "@type": "SFInt32",
                "@name": "player_2_score"
              },
              {
                "@accessType": "outputOnly",
                "@type": "MFString",
                "@name": "player_1_score_text"
              },
              {
                "@accessType": "outputOnly",
                "@type": "MFString",
                "@name": "player_2_score_text"
              },
              {
                "@accessType": "inputOutput",
                "@type": "SFBool",
                "@name": "new_game"
              }
            ],
            "#sourceCode": [
              "castlescript:\r",
              "\r",
              "function initialize(timestamp)\r",
              "  new_game := TRUE\r",
              "\r",
              "function new_game(value, timestamp)\r",
              "  player_1_pos := vector( 8.5, 0, 0);\r",
              "  player_2_pos := vector(-8.5, 0, 0);\r",
              "  ball_pos := vector(0, 0, 0);\r",
              "\r",
              "  player_1_speed := vector(0, 0, 0);\r",
              "  player_2_speed := vector(0, 0, 0);\r",
              "  ball_speed     := vector(0, 0, 0);\r",
              "\r",
              "  player_1_score := 0;\r",
              "  player_2_score := 0\r",
              "\r",
              "function action_key_press(value, timestamp)\r",
              "  if (value = ACTION_KEY_DOWN,\r",
              "    pressed_down := true,\r",
              "    if (value = ACTION_KEY_UP,\r",
              "      pressed_up := true,\r",
              "      if (value = ACTION_KEY_LEFT,\r",
              "        pressed_left := true,\r",
              "        when (value = ACTION_KEY_RIGHT,\r",
              "          pressed_right := true))))\r",
              "\r",
              "function action_key_release(value, timestamp)\r",
              "  if (value = ACTION_KEY_DOWN,\r",
              "    pressed_down := false,\r",
              "    if (value = ACTION_KEY_UP,\r",
              "      pressed_up := false,\r",
              "      if (value = ACTION_KEY_LEFT,\r",
              "        pressed_left := false,\r",
              "        when (value = ACTION_KEY_RIGHT,\r",
              "          pressed_right := false))))\r",
              "\r",
              "function key_press(value, timestamp)\r",
              "  if (value = ' ',\r",
              "    new_game := TRUE,\r",
              "    if (value = 's',\r",
              "      pressed_s := true,\r",
              "      if (value = 'w',\r",
              "        pressed_w := true,\r",
              "        if (value = 'a',\r",
              "          pressed_a := true,\r",
              "          when (value = 'd',\r",
              "            pressed_d := true)))))\r",
              "\r",
              "function key_release(value, timestamp)\r",
              "  if (value = 's',\r",
              "    pressed_s := false,\r",
              "    if (value = 'w',\r",
              "      pressed_w := false,\r",
              "      if (value = 'a',\r",
              "        pressed_a := false,\r",
              "        when (value = 'd',\r",
              "          pressed_d := false))))\r",
              "\r",
              "function player_1_score(value, timestamp)\r",
              "  player_1_score_text := array('Player 1: ' + string(value))\r",
              "\r",
              "function player_2_score(value, timestamp)\r",
              "  player_2_score_text := array('Player 2: ' + string(value))\r",
              "\r",
              "function time(value, timestamp)\r",
              "  { calculate timeDiff, to scale animations\r",
              "    (so that it runs with the same speed on every system) }\r",
              "  timeDiff := if (previousTime >= 0, value - previousTime, 0);\r",
              "\r",
              "  { update previousTime }\r",
              "  previousTime := value;\r",
              "\r",
              "  { Update player_1_speed, based on pressed_.\r",
              "    Using min/max below makes the \"break\" keys work much faster, which means\r",
              "    that balls feel more responsive to the player. }\r",
              "  when (pressed_left , vector_set(player_1_speed, 0, min(0, vector_get(player_1_speed, 0)) - timeDiff * 4));\r",
              "  when (pressed_right, vector_set(player_1_speed, 0, max(0, vector_get(player_1_speed, 0)) + timeDiff * 4));\r",
              "  when (pressed_down , vector_set(player_1_speed, 1, min(0, vector_get(player_1_speed, 1)) - timeDiff * 4));\r",
              "  when (pressed_up   , vector_set(player_1_speed, 1, max(0, vector_get(player_1_speed, 1)) + timeDiff * 4));\r",
              "\r",
              "  { Update player_2_speed, based on pressed_ }\r",
              "  when (pressed_a, vector_set(player_2_speed, 0, min(0, vector_get(player_2_speed, 0)) - timeDiff * 4));\r",
              "  when (pressed_d, vector_set(player_2_speed, 0, max(0, vector_get(player_2_speed, 0)) + timeDiff * 4));\r",
              "  when (pressed_s, vector_set(player_2_speed, 1, min(0, vector_get(player_2_speed, 1)) - timeDiff * 4));\r",
              "  when (pressed_w, vector_set(player_2_speed, 1, max(0, vector_get(player_2_speed, 1)) + timeDiff * 4));\r",
              "\r",
              "  { Update _pos vectors based on _speed }\r",
              "  timeDiff := timeDiff * 10;\r",
              "  player_1_pos := player_1_pos + player_1_speed * timeDiff;\r",
              "  player_2_pos := player_2_pos + player_2_speed * timeDiff;\r",
              "  ball_pos := ball_pos + ball_speed * timeDiff;\r",
              "\r",
              "  { Check collisions between players with field borders (x_size, y_size).\r",
              "    If collision, then change speed (to make sure you get out from the border).\r",
              "    Also, make sure the ball is at most at the border. }\r",
              "  when (vector_get(player_1_pos, 0) < -x_size + player_radius, vector_set(player_1_speed, 0,  abs(vector_get(player_1_speed, 0))));\r",
              "  when (vector_get(player_1_pos, 0) >  x_size - player_radius, vector_set(player_1_speed, 0, -abs(vector_get(player_1_speed, 0))));\r",
              "  vector_set(player_1_pos, 0, max(min(vector_get(player_1_pos, 0), x_size - player_radius), -x_size + player_radius));\r",
              "\r",
              "  when (vector_get(player_1_pos, 1) < -y_size + player_radius, vector_set(player_1_speed, 1,  abs(vector_get(player_1_speed, 1))));\r",
              "  when (vector_get(player_1_pos, 1) >  y_size - player_radius, vector_set(player_1_speed, 1, -abs(vector_get(player_1_speed, 1))));\r",
              "  vector_set(player_1_pos, 1, max(min(vector_get(player_1_pos, 1), y_size - player_radius), -y_size + player_radius));\r",
              "\r",
              "  when (vector_get(player_2_pos, 0) < -x_size + player_radius, vector_set(player_2_speed, 0,  abs(vector_get(player_2_speed, 0))));\r",
              "  when (vector_get(player_2_pos, 0) >  x_size - player_radius, vector_set(player_2_speed, 0, -abs(vector_get(player_2_speed, 0))));\r",
              "  vector_set(player_2_pos, 0, max(min(vector_get(player_2_pos, 0), x_size - player_radius), -x_size + player_radius));\r",
              "\r",
              "  when (vector_get(player_2_pos, 1) < -y_size + player_radius, vector_set(player_2_speed, 1,  abs(vector_get(player_2_speed, 1))));\r",
              "  when (vector_get(player_2_pos, 1) >  y_size - player_radius, vector_set(player_2_speed, 1, -abs(vector_get(player_2_speed, 1))));\r",
              "  vector_set(player_2_pos, 1, max(min(vector_get(player_2_pos, 1), y_size - player_radius), -y_size + player_radius));\r",
              "\r",
              "  { Check collisions between main ball with field borders (x_size, y_size).\r",
              "    If collision, then change speed.\r",
              "    Also, increase player score if crossed vertical border.\r",
              "    Also, make sure the ball is at most at the border --- this is even more\r",
              "    important here, to avoid increasing the score more than once. }\r",
              "  when (vector_get(ball_pos, 0) - ball_radius < -x_size,\r",
              "    vector_set(ball_speed, 0,  abs(vector_get(ball_speed, 0)));\r",
              "    player_1_score := player_1_score + 1);\r",
              "  when (vector_get(ball_pos, 0) + ball_radius >  x_size,\r",
              "    vector_set(ball_speed, 0, -abs(vector_get(ball_speed, 0)));\r",
              "    player_2_score := player_2_score + 1);\r",
              "  vector_set(ball_pos, 0, max(min(vector_get(ball_pos, 0), x_size - ball_radius), -x_size + ball_radius));\r",
              "\r",
              "  when (vector_get(ball_pos, 1) - ball_radius < -y_size, vector_set(ball_speed, 1,  abs(vector_get(ball_speed, 1))));\r",
              "  when (vector_get(ball_pos, 1) + ball_radius >  y_size, vector_set(ball_speed, 1, -abs(vector_get(ball_speed, 1))));\r",
              "  vector_set(ball_pos, 1, max(min(vector_get(ball_pos, 1), y_size - ball_radius), -y_size + ball_radius));\r",
              "\r",
              "  { Check collisions between balls }\r",
              "  when (vector_sqr_length(player_1_pos - player_2_pos) < sqr(2 * player_radius),\r",
              "    player_1_speed := player_1_pos - player_2_pos;\r",
              "    player_1_speed :=  player_1_speed * (0.5 / vector_length(player_1_speed));\r",
              "    player_2_speed := -player_1_speed;\r",
              "\r",
              "    { Move the players now to not collide. Otherwise players can make\r",
              "      balls collide more and more by holding keys pressed to push into\r",
              "      each other, and when player_1_pos = player_2_pos terrible things\r",
              "      happen since player_1_speed gets 0.\r",
              "\r",
              "      We want to make players distance 2 * player_radius.\r",
              "      So we want to move by vector player_1_speed adjusted to this length.\r",
              "      We know length of player_1_speed: 0.5 (set 2 lines above).\r",
              "      So we want to scale it by 2 * player_radius / 0.5 = 4 * player_radius. }\r",
              "    player_1_pos := player_2_pos + (4 * player_radius) * player_1_speed;\r",
              "    player_2_pos := player_1_pos + (4 * player_radius) * player_2_speed\r",
              "    );\r",
              "\r",
              "  when (vector_sqr_length(ball_pos - player_1_pos) < sqr(player_radius + ball_radius),\r",
              "    ball_speed := ball_pos - player_1_pos);\r",
              "\r",
              "  when (vector_sqr_length(ball_pos - player_2_pos) < sqr(player_radius + ball_radius),\r",
              "    ball_speed := ball_pos - player_2_pos)\r",
              ""
            ]
          }
        },
        { "TimeSensor":
          {
            "@DEF": "Time",
            "@loop": true
          }
        },
        { "KeySensor":
          {
            "@DEF": "Key"
          }
        },
        { "NavigationInfo":
          {
            "@type": [
              "NONE"
            ],
            "@avatarSize": [
              1
            ]
          }
        },
        { "Viewpoint":
          {
            "@position": [ 0, 7.214238e-7, 26.50428 ]
          }
        },
        { "PointLight":
          {
          }
        },
        { "Transform":
          {
            "@translation": [ 0, -3, -1 ],
            "-children": [
              { "Shape":
                {
                  "-appearance": { "Appearance":
                    {
                      "-material": { "Material":
                        {
                          "@diffuseColor": [ 0.2, 0.2, 0.2 ]
                        }
                      }
                    }
                  },
                  "-geometry": { "Text":
                    {
                      "@string": [
                        "\"Ride of the Ancient Balls\"",
                        "Trivial game/toy, done in pure X3D (KeySensor and CastleScript).",
                        "Controls: arrows (player 1), awsd (player 2), space (restart).",
                        "To score, push the white ball into your opponents border.",
                        "All balls collide, with each other and all borders."
                      ],
                      "-fontStyle": { "FontStyle":
                        {
                          "@size": 0.7,
                          "@justify": [
                            "MIDDLE"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        { "Transform":
          {
            "@DEF": "Player1",
            "-children": [
              { "Shape":
                {
                  "-appearance": { "Appearance":
                    {
                      "@DEF": "Player1App",
                      "-material": { "Material":
                        {
                          "@diffuseColor": [ 0.3, 0.3, 1 ]
                        }
                      }
                    }
                  },
                  "-geometry": { "Sphere":
                    {
                      "@radius": 3
                    }
                  }
                }
              }
            ]
          }
        },
        { "Transform":
          {
            "@translation": [ 13, 0, 0 ],
            "-children": [
              { "Shape":
                {
                  "-appearance": { "Appearance":
                    {
                      "@USE": "Player1App"
                    }
                  },
                  "-geometry": { "Box":
                    {
                      "@size": [ 2, 16, 2 ]
                    }
                  }
                }
              }
            ]
          }
        },
        { "Transform":
          {
            "@translation": [ 1, 6, 2 ],
            "-children": [
              { "Shape":
                {
                  "-appearance": { "Appearance":
                    {
                      "@USE": "Player1App"
                    }
                  },
                  "-geometry": { "Text":
                    {
                      "@DEF": "Player1ScoreText",
                      "@string": [
                        "blah"
                      ],
                      "-fontStyle": { "FontStyle":
                        {
                          "@size": 1.5
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        { "Transform":
          {
            "@DEF": "Player2",
            "-children": [
              { "Shape":
                {
                  "-appearance": { "Appearance":
                    {
                      "@DEF": "Player2App",
                      "-material": { "Material":
                        {
                          "@diffuseColor": [ 1, 1, 0.5 ]
                        }
                      }
                    }
                  },
                  "-geometry": { "Sphere":
                    {
                      "@radius": 3
                    }
                  }
                }
              }
            ]
          }
        },
        { "Transform":
          {
            "@translation": [ -13, 0, 0 ],
            "-children": [
              { "Shape":
                {
                  "-appearance": { "Appearance":
                    {
                      "@USE": "Player2App"
                    }
                  },
                  "-geometry": { "Box":
                    {
                      "@size": [ 2, 16, 2 ]
                    }
                  }
                }
              }
            ]
          }
        },
        { "Transform":
          {
            "@translation": [ -1, 6, 2 ],
            "-children": [
              { "Shape":
                {
                  "-appearance": { "Appearance":
                    {
                      "@USE": "Player2App"
                    }
                  },
                  "-geometry": { "Text":
                    {
                      "@DEF": "Player2ScoreText",
                      "@string": [
                        "blah"
                      ],
                      "-fontStyle": { "FontStyle":
                        {
                          "@size": 1.5,
                          "@justify": [
                            "END"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        { "Transform":
          {
            "@DEF": "Ball",
            "-children": [
              { "Shape":
                {
                  "-appearance": { "Appearance":
                    {
                      "-material": { "Material":
                        {
                        }
                      }
                    }
                  },
                  "-geometry": { "Sphere":
                    {
                    }
                  }
                }
              }
            ]
          }
        },
        { "Transform":
          {
            "@translation": [ 0, -9, 0 ],
            "-children": [
              { "Shape":
                {
                  "@DEF": "NeutralBorder",
                  "-appearance": { "Appearance":
                    {
                      "@DEF": "NeutralBorderApp",
                      "-material": { "Material":
                        {
                          "@diffuseColor": [ 0.5, 0.5, 0.5 ]
                        }
                      }
                    }
                  },
                  "-geometry": { "Box":
                    {
                      "@size": [ 26, 2, 2 ]
                    }
                  }
                }
              }
            ]
          }
        },
        { "Transform":
          {
            "@translation": [ 0, 9, 0 ],
            "-children": [
              { "Shape":
                {
                  "@USE": "NeutralBorder"
                }
              }
            ]
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Time",
            "@fromField": "time",
            "@toNode": "Scr",
            "@toField": "time"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Key",
            "@fromField": "actionKeyPress",
            "@toNode": "Scr",
            "@toField": "action_key_press"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Key",
            "@fromField": "actionKeyRelease",
            "@toNode": "Scr",
            "@toField": "action_key_release"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Key",
            "@fromField": "keyPress",
            "@toNode": "Scr",
            "@toField": "key_press"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Key",
            "@fromField": "keyRelease",
            "@toNode": "Scr",
            "@toField": "key_release"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Scr",
            "@fromField": "player_1_pos_changed",
            "@toNode": "Player1",
            "@toField": "set_translation"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Scr",
            "@fromField": "player_1_score_text",
            "@toNode": "Player1ScoreText",
            "@toField": "set_string"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Scr",
            "@fromField": "player_2_pos_changed",
            "@toNode": "Player2",
            "@toField": "set_translation"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Scr",
            "@fromField": "player_2_score_text",
            "@toNode": "Player2ScoreText",
            "@toField": "set_string"
          }
        },
        { "ROUTE":
          {
            "@fromNode": "Scr",
            "@fromField": "ball_pos_changed",
            "@toNode": "Ball",
            "@toField": "set_translation"
          }
        }
      ]
    }
  }
}
