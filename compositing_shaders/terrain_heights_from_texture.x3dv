#X3D V3.2 utf8
PROFILE Interchange

# Demo of Effect node to use texture to define heights.
#
# - The geometry is just Blender's grid, flat plane with 256x256 vertexes.
#   It's a trivial glTF file.
#   It uses "textures/test_texture_weird_alpha.png" RGB channel in regular
#   way (to provide base colors).
#
# - Shader looks at the texture alpha to modify the vertex height.
#   See "textures/test_texture_weird_alpha.png",
#   it just has a crazy alpha channel generated by Perlin noise in GIMP.
#
# See https://castle-engine.io/shaders about our shader effects.
# This uses PLUG_vertex_object_space_change, see
# https://castle-engine.io/compositing_shaders_doc/html/appendix.plugs.html .

Group {
  children [
    Effect {
      parts [
        EffectPart {
          type "VERTEX" url "data:text/plain,
            /* OpenGL Shading Language code to modify geometry height
               by alpha channel of a texture. */

            uniform sampler2D tex_heights;

            float height_from_2d_position(vec2 pos)
            {
              /* Bring pos into [0..1] range.
                 The numbers below correspond to object translation and size in Blender. */
              vec2 uv = pos + vec2(0.5, 0.5);
              // Adjust this constant however needed.
              const float max_height = 0.1;
              return texture2D(tex_heights, uv).a * max_height;
            }

            vec3 vertex_from_2d_position(vec2 pos)
            {
              return vec3(pos.x, height_from_2d_position(pos), pos.y);
            }

            void PLUG_vertex_object_space(inout vec4 position, inout vec3 normal)
            {
              // Although position is 4D vector (homogeneous coordinates),
              // we assume below that last component is 1, and only pay attention to position.xyz.
              // This is a position in object-space and it has last component = 1
              // in practice always.

              position.y = height_from_2d_position(vec2(position.x, position.z));

              // To calculate normal vector (needed for correct lighting),
              // sample also position with increased X, and increased Z.

              const float shift = 0.01;
              vec3 position_shift_x = vertex_from_2d_position(vec2(position.x + shift, position.z));
              vec3 position_shift_z = vertex_from_2d_position(vec2(position.x, position.z + shift));
              normal = normalize(cross(
                position_shift_z - position.xyz,
                position_shift_x - position.xyz
              ));
            }"
        }
      ]
      language "GLSL"
      initializeOnly SFNode tex_heights ImageTexture {
        url "textures/test_texture_weird_alpha.png"
        repeatS FALSE
        repeatT FALSE
      }
    }
    Inline { url "terrain_heights_from_texture.glb" }
  ]
}
