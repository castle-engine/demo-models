#X3D V3.2 utf8
PROFILE Interchange

# Volumetric animated fog, with realistic look: we sample a couple
# of times along the line between camera and visible vertex.
# This is implemented as an "effect", so it can be used with normal
# effects of our engine like bump mapping (shown here).
#
# Toggle fog effect with Shift key (this is also a test that
# Effect.enabled field works fine).
#
# For a full idea see
# http://www.humus.name/index.php?page=3D&ID=70
# http://www.evl.uic.edu/sjames/cs525/shader.html
#
# Our simplifications: For one thing, we don't do a first pass
# to calculate z-buffer to use in later fog pass.
# Instead, we just calculate fogging during the one and only pass.
# This means that you'll get a lot of slowdown if given pixel
# is covered by more than one polygon,
# and we happen to render the more distant polygons first
# (although occlusion culling, even mere sorting, will help you fight it).
#
# TODO: There are artifacts visible --- bad colored lines, some inaccuracy
# in our "remaining distance" calculation.
# TODO: no shadows. humus used 3d light map. Light shaft through fog.

# Camera settings "encoded" in the VRML declaration below :
# direction -0.8253530859947204 -0.1064514964818954 0.5544890761375427
# up -0.0883623585104942 0.9943180680274963 0.0593639127910137
# gravityUp 0 1 0
DEF MyViewpoint Viewpoint {
  position 3.4308829307556152 1.7320748567581177 -4.6322202682495117
  orientation -0.0283925142139196 0.9981759190559387 0.0532803125679493 2.1638731956481934
}

DEF ProxSensor ProximitySensor {
  size 100 100 100
}

DEF FogEffect Effect {
  language "GLSL"
  initializeOnly SFNode fog_density ImageTexture3D {
    url "textures/noise_from_humus.dds"
    repeatS TRUE
    repeatT TRUE
    repeatR TRUE }
  inputOnly SFMatrix4f cameraInverseMatrix
  # TODO: inputOnly should be enough for camera_world.
  # But when shaders are regenerated, we don't update immediately
  # uniform values from inputOnly (because we don't store them anywhere),
  # so e.g. Ctrl+H (headlight switch) causes reset of camera_world,
  # until we move (and cause ProxSensor to update position_changed).
  inputOutput SFVec3f camera_world 0 0 0
  initializeOnly SFVec3f fog_color 0.8 0.8 0.8
  inputOnly SFTime time
  parts [
    EffectPart {
      type "VERTEX"
      url "data:text/plain,

uniform mat4 cameraInverseMatrix;
varying vec3 vertex_world;

void PLUG_vertex_eye_space(const in vec4 vertex_eye, const in vec3 normal_eye)
{
  vertex_world = vec3(cameraInverseMatrix * vertex_eye);
}" }

    EffectPart {
      type "FRAGMENT"
      url "data:text/plain,
/* On OpenGLES, this depends on 3D texture support, which depends on OpenGLES 3.0.
   CGE will automatically add version to request GLSL version with texture3D. */

uniform sampler3D fog_density;
uniform vec3 fog_color;

varying vec3 vertex_world;
uniform vec3 camera_world;

uniform float time;

float get_fog_density(in vec3 pos)
{
  pos /= 80.0;
  pos.y -= time / 20.0;
  return texture3D(fog_density, pos).r;
  /* Make fog less dense */
//  return 1.0 - clamp((1.0 - texture3D(fog_density, pos).r) / 3.0, 0.0, 1.0);
}

void PLUG_fog_apply(inout vec4 fragment_color, const vec3 normal_eye_fragment)
{
  /* fog = how much light passes through (so it's actually 1 - fog density) */
  float fog = 1.0;
  float full_distance = distance(vertex_world, camera_world);
  float sampled_distance = 0.0;
  float distance_step = 16.0;

  while (sampled_distance < full_distance)
  {
    fog *= get_fog_density(mix(vertex_world, camera_world,
      sampled_distance / full_distance));
    sampled_distance += distance_step;
  }

  /* To prevent fog bands (because we do a discrete number of steps to reach
     full_distance), do the final step, scaled by the remainder
     of the distance. For this, we sample the fog depth at full_distance,
     that is mix(vertex_world, camera_world, 1.0), that is camera_world. */
  fog *= pow(get_fog_density(camera_world),
    (full_distance - (sampled_distance - distance_step)) / distance_step);

  fragment_color.rgb = mix(fog_color, fragment_color.rgb, fog);
}" }
  ]
  ROUTE MyViewpoint.cameraInverseMatrix TO FogEffect.cameraInverseMatrix
  ROUTE ProxSensor.position_changed TO FogEffect.camera_world
}

# Transform { translation 0 +1.5 0
#   children Shape {
#     appearance Appearance { material Material { } }
#     geometry Box { size 10 3 10 solid FALSE }
#   }
# }

Inline { url "volumetric_animated_fog_geometry.x3d" }

# Time stuff ----------------------------------------------------------------

DEF Timer TimeSensor { loop TRUE }
ROUTE Timer.time TO FogEffect.time

EXTERNPROTO KambiNavigationInfo [
  inputOnly   SFBool   set_bind
  inputOutput MFFloat  avatarSize
  inputOutput SFBool   headlight
  inputOutput SFFloat  speed
  inputOutput MFString type
  inputOutput SFFloat  visibilityLimit
  outputOnly  SFBool   isBound
  initializeOnly  SFBool   timeOriginAtLoad
] [ "urn:castle-engine.sourceforge.net:node:KambiNavigationInfo",
    "http://castle-engine.sourceforge.net/fallback_prototypes.x3dv#KambiNavigationInfo"
]

KambiNavigationInfo {
  timeOriginAtLoad TRUE
  headlight FALSE
  type "WALK"
  avatarSize [ 0.1 1.75 0.2 ]
  speed 5
}

# Toggle effect "enabled" with shift key -------------------------------------

DEF K KeySensor { }
DEF EnableToggle BooleanToggle { toggle TRUE }

ROUTE K.shiftKey TO EnableToggle.set_boolean
ROUTE EnableToggle.toggle TO FogEffect.enabled
