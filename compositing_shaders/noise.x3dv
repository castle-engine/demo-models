#X3D V3.2 utf8
PROFILE Interchange

# ShaderTexture defining a nice smooth 3D noise in GLSL.
# The noise is infinite is all directions (so can be used e.g.
# to take 2D slice for water surface, with 3rd component from time).
# We use white noise image texture underneath.
#
# Shows also the 2D (optimized) version of noise,
# and the (worse quality, but even faster) linear 2D noise,
# and the smooth 3D noise from texture.
#
# We also have a version using GLSL noise1() function,
# but it's not usable:
# - Radeon X1600 (fglrx) and Radeon HD 4330 (Windows) write "Fragment Shader not supported by HW"
# - NVidia GeForce 450 always returns 0

# Camera settings "encoded" in the VRML declaration below :
# direction 0.3635934591293335 -0.4768730998039245 -0.800240933895111
# up -0.2291765660047531 0.7868427038192749 -0.5730183124542236
# gravityUp 0 1 0
Viewpoint {
  position 0.3367938995361328 3.9937033653259277 6.7564029693603516
  orientation -0.7869622111320495 -0.4050620794296264 0.4654194414615631 0.7302504777908325
}

Shape {
  appearance DEF App Appearance {
    material Material { }
    texture ImageTexture3D { url "../textures/white_noise_3d.dds"
      textureProperties TextureProperties {
        minificationFilter "NEAREST_PIXEL"
        boundaryModeS "CLAMP_TO_EDGE"
        boundaryModeT "CLAMP_TO_EDGE"
        boundaryModeR "CLAMP_TO_EDGE"
      }
    }
  }
  geometry Box { }
}

Transform { translation 3 0 0 children
Shape {
  appearance DEF App Appearance {
    material Material { }
    texture ShaderTexture {
      defaultTexCoord "BOUNDS3D"
      effects DEF NoiseEffect1 Effect {
        language "GLSL"
        initializeOnly SFNode white_noise ImageTexture3D {
          url "../textures/white_noise_3d.dds"
          textureProperties TextureProperties {
            minificationFilter "NEAREST_PIXEL"
            boundaryModeS "REPEAT"
            boundaryModeT "REPEAT"
            boundaryModeR "REPEAT"
          }
        }
        inputOnly SFTime time
        parts [
          DEF NoiseLibrary EffectPart { type "FRAGMENT" url "noise.glsl" }
          EffectPart {
            type "FRAGMENT"
            url "data:text/plain,

uniform float time;
float noise_3d_cos(const vec3 v);
void PLUG_texture_color(inout vec4 texture_color,
  in vec4 tex_coord)
{
  tex_coord.xyz += vec3(time / 2.0);
  texture_color.rgb = vec3(
    noise_3d_cos(tex_coord.xyz * 4.0) +
    noise_3d_cos(tex_coord.xyz * 8.0) / 2.0 +
    noise_3d_cos(tex_coord.xyz * 16.0) / 4.0
    ) / 3.0;
}" } ] } } }
  geometry Box { }
} }

Transform { translation 6 0 0 children
Shape {
  appearance DEF App Appearance {
    material Material { }
    texture ShaderTexture {
      defaultTexCoord "BOUNDS3D"
      effects DEF NoiseEffect2 Effect {
        language "GLSL"
        initializeOnly SFNode white_noise ImageTexture3D {
          url "../textures/white_noise_3d.dds"
          textureProperties TextureProperties {
            minificationFilter "NEAREST_PIXEL"
            boundaryModeS "REPEAT"
            boundaryModeT "REPEAT"
            boundaryModeR "REPEAT"
          }
        }
        inputOnly SFTime time
        parts [
          USE NoiseLibrary
          EffectPart {
            type "FRAGMENT"
            url "data:text/plain,

uniform float time;
float noise_2d_cos(const vec2 v);
void PLUG_texture_color(inout vec4 texture_color,
  in vec4 tex_coord)
{
  tex_coord.xyz += vec3(time / 2.0);
  texture_color.rgb = vec3(
    noise_2d_cos(tex_coord.xy * 4.0) +
    noise_2d_cos(tex_coord.xy * 8.0) / 2.0 +
    noise_2d_cos(tex_coord.xy * 16.0) / 4.0
    ) / 3.0;
}" } ] } } }
  geometry Box { }
} }

Transform { translation 9 0 0 children
Shape {
  appearance DEF App Appearance {
    material Material { }
    texture ShaderTexture {
      defaultTexCoord "BOUNDS3D"
      effects DEF NoiseEffect3 Effect {
        language "GLSL"
        initializeOnly SFNode white_noise ImageTexture3D {
          url "../textures/white_noise_3d.dds"
          textureProperties TextureProperties {
            # minificationFilter "AVG_PIXEL"
            boundaryModeS "REPEAT"
            boundaryModeT "REPEAT"
            boundaryModeR "REPEAT"
          }
        }
        inputOnly SFTime time
        parts [
          USE NoiseLibrary
          EffectPart {
            type "FRAGMENT"
            url "data:text/plain,

uniform float time;
float noise_2d_lin(const vec2 v);
void PLUG_texture_color(inout vec4 texture_color,
  in vec4 tex_coord)
{
  tex_coord.xyz += vec3(time / 2.0);
  texture_color.rgb = vec3(
    noise_2d_lin(tex_coord.xy * 4.0) +
    noise_2d_lin(tex_coord.xy * 8.0) / 2.0 +
    noise_2d_lin(tex_coord.xy * 16.0) / 4.0
    ) / 3.0;
}" } ] } } }
  geometry Box { }
} }

Transform { translation 12 0 0 children
Shape {
  appearance DEF App Appearance {
    material Material { }
    # This could actually be done without ShaderTexture and without
    # Effects at all, we just show ImageTexture3D inside.
    texture ShaderTexture {
      defaultTexCoord "BOUNDS3D"
      effects DEF NoiseEffect4 Effect {
        language "GLSL"
        initializeOnly SFNode smooth_noise_tex ImageTexture3D {
          url "textures/noise_from_humus.dds"
          textureProperties TextureProperties {
            # minificationFilter "AVG_PIXEL"
            boundaryModeS "REPEAT"
            boundaryModeT "REPEAT"
            boundaryModeR "REPEAT"
          }
        }
        inputOnly SFTime time
        parts [
          EffectPart {
            type "FRAGMENT"
            url "data:text/plain,
uniform float time;
uniform sampler3D smooth_noise_tex;
void PLUG_texture_color(inout vec4 texture_color,
  in vec4 tex_coord)
{
  tex_coord.xyz += vec3(time / 2.0);
  tex_coord /= 4.0;
  texture_color = texture3D(smooth_noise_tex, tex_coord.xyz);
}" } ] } } }
  geometry Box { }
} }

# Transform { translation 15 0 0 children
# Shape {
#   appearance DEF App Appearance {
#     material Material { }
#     texture ShaderTexture {
#       defaultTexCoord "BOUNDS3D"
#       effects DEF NoiseEffect5 Effect {
#         language "GLSL"
#         inputOnly SFTime time
#         parts [
#           EffectPart {
#             type "FRAGMENT"
#             url "data:text/plain,
#
# uniform float time;
# void PLUG_texture_color(inout vec4 texture_color,
#   in vec4 tex_coord)
# {
#   tex_coord.xyz += vec3(time / 2.0);
#   texture_color.rgb = vec3(
#     /* noise1 returns values in [-1,1]. For our test, we map it to [0,1] */
#     (noise1(tex_coord.xyz * 4.0 ) + 1.0) / 2.0 +
#     (noise1(tex_coord.xyz * 8.0 ) + 1.0) / 4.0 +
#     (noise1(tex_coord.xyz * 16.0) + 1.0) / 8.0
#     ) / 3.0;
# }" } ] } } }
#   geometry Box { }
# } }

# Time stuff -----------------------------------------------------------------

DEF Timer TimeSensor { loop TRUE }
ROUTE Timer.time TO NoiseEffect1.time
ROUTE Timer.time TO NoiseEffect2.time
ROUTE Timer.time TO NoiseEffect3.time
ROUTE Timer.time TO NoiseEffect4.time
#ROUTE Timer.time TO NoiseEffect5.time

EXTERNPROTO KambiNavigationInfo [
  inputOnly   SFBool   set_bind
  inputOutput MFFloat  avatarSize
  inputOutput SFBool   headlight
  inputOutput SFFloat  speed
  inputOutput MFString type
  inputOutput SFFloat  visibilityLimit
  outputOnly  SFBool   isBound
  initializeOnly  SFBool   timeOriginAtLoad
] [ "urn:castle-engine.sourceforge.net:node:KambiNavigationInfo",
    "http://castle-engine.sourceforge.net/fallback_prototypes.x3dv#KambiNavigationInfo"
]

KambiNavigationInfo {
  headlight TRUE
  type ["EXAMINE", "ANY"]
  timeOriginAtLoad TRUE
}
