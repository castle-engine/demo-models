#X3D V3.2 utf8
PROFILE Interchange
COMPONENT Shaders:1

# Based on cellular_texturing.x3dv, single more detailed shape.
# For the title page of my Ph.D. Thesis :)

Background { skyColor 1 1 1 }

# Camera settings "encoded" in the VRML/X3D declaration below :
# direction 0.1788986325263977 -0.402470588684082 0.8977791666984558
# up 0.3063520789146423 0.8899267315864563 0.337903082370758
# gravityUp 0 1 0
Viewpoint {
  position -1.2724165916442871 2.5093426704406738 -5.6427803039550781
  orientation -0.1359741240739822 -0.9716815948486328 -0.1932508498430252 2.9018759727478027
}

Shape {
  appearance Appearance {
    texture ShaderTexture {
      effects Effect {
        language "GLSL"
        parts EffectPart {
          type "FRAGMENT"
          url "data:text/plain,

const int count = 120;

const vec3 feature_points[count] = vec3[count](
  vec3(0.12, 0.08, 0.61),
  vec3(0.08, 0.61, 0.99),
  vec3(0.78, 0.40, 0.85),
  vec3(0.45, 0.58, 0.32),
  vec3(0.50, 0.38, 0.03),
  vec3(0.64, 0.27, 0.84),
  vec3(0.15, 0.89, 0.61),
  vec3(0.86, 0.37, 0.13),
  vec3(0.29, 0.81, 0.00),
  vec3(0.92, 0.77, 0.43),
  vec3(0.01, 0.86, 0.24),
  vec3(0.84, 0.27, 0.95),
  vec3(0.17, 0.17, 0.75),
  vec3(0.33, 0.91, 0.40),
  vec3(0.40, 0.11, 0.32),
  vec3(0.50, 0.71, 0.81),
  vec3(0.11, 0.86, 0.18),
  vec3(0.61, 0.83, 0.51),
  vec3(0.77, 0.83, 0.80),
  vec3(0.56, 0.97, 0.35),
  vec3(0.77, 0.97, 0.94),
  vec3(0.13, 0.21, 0.62),
  vec3(0.06, 0.16, 0.23),
  vec3(0.14, 0.46, 0.90),
  vec3(0.79, 0.28, 0.49),
  vec3(0.31, 0.79, 0.01),
  vec3(0.78, 0.68, 0.91),
  vec3(0.23, 0.11, 0.88),
  vec3(0.05, 0.65, 0.32),
  vec3(0.80, 0.12, 0.76),
  vec3(0.36, 0.04, 0.40),
  vec3(0.86, 0.02, 0.83),
  vec3(0.45, 0.33, 0.92),
  vec3(0.81, 0.29, 0.08),
  vec3(0.18, 0.89, 0.60),
  vec3(1.00, 0.14, 0.94),
  vec3(0.11, 0.56, 0.02),
  vec3(0.43, 0.90, 0.01),
  vec3(0.56, 0.20, 0.63),
  vec3(0.44, 0.92, 0.76),
  vec3(0.82, 0.36, 0.24),
  vec3(0.94, 0.18, 0.62),
  vec3(0.68, 0.74, 0.33),
  vec3(0.86, 0.01, 0.86),
  vec3(0.22, 0.57, 0.31),
  vec3(0.64, 0.62, 0.34),
  vec3(0.69, 0.23, 0.39),
  vec3(0.63, 0.05, 0.08),
  vec3(0.83, 0.60, 0.62),
  vec3(0.55, 0.36, 0.96),
  vec3(0.61, 0.12, 0.76),
  vec3(0.46, 0.63, 0.31),
  vec3(0.37, 0.06, 0.67),
  vec3(0.42, 0.75, 0.62),
  vec3(0.00, 0.67, 0.44),
  vec3(0.05, 0.44, 0.11),
  vec3(0.59, 0.64, 0.96),
  vec3(0.58, 0.66, 0.44),
  vec3(0.65, 0.26, 0.67),
  vec3(0.19, 0.72, 0.48),
  vec3(0.10, 0.52, 0.33),
  vec3(0.17, 0.51, 0.44),
  vec3(0.73, 0.02, 0.70),
  vec3(0.70, 0.49, 0.25),
  vec3(0.33, 0.68, 0.38),
  vec3(0.89, 0.76, 0.48),
  vec3(0.04, 0.37, 0.38),
  vec3(0.32, 0.09, 0.70),
  vec3(0.67, 0.44, 0.09),
  vec3(0.50, 0.08, 0.86),
  vec3(0.18, 0.14, 0.57),
  vec3(0.79, 0.89, 0.34),
  vec3(0.98, 0.14, 0.19),
  vec3(0.35, 0.91, 0.12),
  vec3(0.63, 0.80, 0.21),
  vec3(0.25, 0.46, 0.60),
  vec3(0.85, 0.39, 0.90),
  vec3(0.85, 0.05, 0.33),
  vec3(0.96, 0.97, 0.99),
  vec3(0.28, 0.06, 0.30),
  vec3(0.43, 0.08, 0.27),
  vec3(0.67, 0.24, 0.25),
  vec3(0.79, 0.47, 0.92),
  vec3(0.96, 0.20, 0.77),
  vec3(0.27, 0.77, 0.45),
  vec3(0.06, 0.88, 0.09),
  vec3(0.72, 0.46, 0.09),
  vec3(0.78, 0.09, 0.93),
  vec3(0.56, 0.22, 0.52),
  vec3(0.22, 0.24, 0.79),
  vec3(0.90, 0.55, 0.84),
  vec3(0.22, 0.57, 0.57),
  vec3(0.47, 0.50, 0.95),
  vec3(0.42, 0.74, 0.38),
  vec3(0.07, 0.39, 0.86),
  vec3(0.20, 0.78, 0.84),
  vec3(0.36, 0.97, 0.88),
  vec3(0.95, 0.70, 0.86),
  vec3(0.53, 0.91, 0.35),
  vec3(0.31, 0.39, 0.26),
  vec3(0.20, 0.21, 0.26),
  vec3(0.67, 0.39, 0.73),
  vec3(0.67, 0.20, 0.42),
  vec3(0.45, 0.48, 0.11),
  vec3(0.55, 0.43, 0.28),
  vec3(0.25, 0.54, 0.41),
  vec3(0.52, 0.08, 0.12),
  vec3(0.83, 0.13, 0.07),
  vec3(0.03, 0.54, 0.10),
  vec3(0.61, 0.83, 0.97),
  vec3(0.12, 0.39, 0.02),
  vec3(0.15, 0.65, 0.69),
  vec3(0.80, 0.03, 0.18),
  vec3(0.48, 0.02, 0.52),
  vec3(0.80, 0.06, 0.66),
  vec3(0.85, 0.57, 0.17),
  vec3(0.45, 0.91, 0.53),
  vec3(0.40, 0.84, 0.13),
  vec3(0.36, 0.53, 0.27),
  vec3(0.73, 0.15, 0.52)
);

const vec3 feature_colors[count] = vec3[count](
  vec3(1.0 , 1.0 , 0.0 ),
  vec3(1.0 , 0.0 , 0.0 ),
  vec3(0.5 , 0.5 , 1.0 ),
  vec3(0.0 , 1.0 , 0.0 ),
  vec3(0.5 , 1.0 , 1.0 ),
  vec3(1.0 , 1.0 , 1.0 ),
  vec3(0.94, 0.68, 0.03),
  vec3(0.28, 0.79, 0.63),
  vec3(0.94, 0.64, 0.56),
  vec3(0.06, 0.38, 0.52),
  vec3(0.66, 0.19, 0.08),
  vec3(0.68, 0.46, 0.89),
  vec3(0.50, 0.63, 0.27),
  vec3(0.62, 0.15, 0.76),
  vec3(0.06, 0.39, 0.75),
  vec3(0.99, 0.10, 0.39),
  vec3(0.62, 0.32, 0.98),
  vec3(0.82, 0.24, 0.17),
  vec3(0.27, 0.02, 0.35),
  vec3(0.28, 0.94, 0.94),
  vec3(0.49, 0.27, 0.53),
  vec3(0.83, 0.31, 0.34),
  vec3(0.93, 0.74, 0.61),
  vec3(0.53, 0.53, 0.96),
  vec3(0.31, 0.01, 0.34),
  vec3(0.77, 0.64, 0.17),
  vec3(0.81, 0.97, 0.32),
  vec3(0.44, 0.91, 0.45),
  vec3(0.65, 0.52, 0.45),
  vec3(0.10, 0.76, 0.43),
  vec3(0.38, 0.88, 0.89),
  vec3(0.93, 0.08, 0.09),
  vec3(0.37, 0.20, 0.41),
  vec3(0.73, 0.43, 0.61),
  vec3(0.45, 0.09, 0.99),
  vec3(0.59, 0.26, 0.67),
  vec3(0.32, 0.80, 0.44),
  vec3(0.47, 0.17, 0.76),
  vec3(0.45, 0.89, 0.64),
  vec3(0.59, 0.77, 0.23),
  vec3(0.79, 0.36, 0.51),
  vec3(0.62, 0.71, 0.32),
  vec3(0.57, 0.60, 0.88),
  vec3(0.90, 0.94, 0.43),
  vec3(0.65, 0.25, 0.39),
  vec3(0.57, 0.97, 0.74),
  vec3(0.43, 0.95, 0.10),
  vec3(0.29, 0.97, 0.20),
  vec3(0.11, 0.96, 0.34),
  vec3(0.25, 0.17, 0.96),
  vec3(0.78, 0.50, 0.16),
  vec3(0.43, 0.60, 0.35),
  vec3(0.25, 0.45, 0.67),
  vec3(0.77, 0.43, 0.90),
  vec3(0.66, 0.55, 0.17),
  vec3(0.46, 0.93, 0.81),
  vec3(0.11, 0.92, 0.64),
  vec3(0.50, 0.47, 0.76),
  vec3(0.49, 1.00, 0.77),
  vec3(0.06, 0.30, 0.46),
  vec3(0.98, 0.51, 0.50),
  vec3(0.24, 0.04, 0.04),
  vec3(0.26, 0.69, 0.91),
  vec3(0.67, 0.98, 0.46),
  vec3(0.52, 0.58, 0.50),
  vec3(0.61, 0.33, 0.97),
  vec3(0.10, 0.24, 0.97),
  vec3(0.99, 0.62, 0.94),
  vec3(0.07, 0.54, 0.91),
  vec3(0.06, 0.05, 0.15),
  vec3(0.98, 0.40, 0.25),
  vec3(0.75, 0.50, 0.75),
  vec3(0.24, 0.90, 0.93),
  vec3(0.93, 0.24, 0.53),
  vec3(0.53, 0.01, 0.73),
  vec3(0.66, 0.47, 0.66),
  vec3(0.84, 0.63, 0.85),
  vec3(0.10, 0.07, 0.88),
  vec3(0.27, 0.12, 0.18),
  vec3(0.28, 0.07, 0.75),
  vec3(0.51, 0.93, 0.69),
  vec3(0.25, 0.52, 0.26),
  vec3(0.38, 0.53, 0.32),
  vec3(0.54, 0.99, 0.87),
  vec3(0.59, 0.68, 0.50),
  vec3(0.03, 0.19, 0.15),
  vec3(0.63, 0.32, 0.97),
  vec3(0.41, 0.72, 0.20),
  vec3(0.04, 0.66, 0.10),
  vec3(0.58, 0.04, 0.05),
  vec3(0.66, 0.03, 0.48),
  vec3(0.04, 0.25, 0.04),
  vec3(0.82, 0.56, 0.58),
  vec3(0.97, 0.60, 0.36),
  vec3(0.33, 0.19, 0.13),
  vec3(0.88, 0.72, 0.07),
  vec3(0.18, 0.65, 0.49),
  vec3(0.86, 0.61, 0.21),
  vec3(0.70, 0.93, 0.74),
  vec3(0.49, 0.41, 0.88),
  vec3(0.99, 0.62, 0.75),
  vec3(0.23, 0.78, 0.58),
  vec3(0.27, 0.49, 0.78),
  vec3(0.33, 0.95, 0.58),
  vec3(0.41, 0.98, 0.10),
  vec3(0.28, 0.56, 0.55),
  vec3(0.79, 0.09, 0.52),
  vec3(0.98, 0.56, 0.41),
  vec3(0.06, 0.06, 0.65),
  vec3(0.91, 0.28, 0.99),
  vec3(0.68, 0.12, 0.00),
  vec3(0.75, 0.55, 0.09),
  vec3(0.22, 0.87, 0.32),
  vec3(0.92, 0.06, 0.36),
  vec3(0.31, 0.57, 0.04),
  vec3(0.13, 0.70, 0.35),
  vec3(0.58, 0.10, 0.55),
  vec3(0.06, 0.08, 0.57),
  vec3(0.19, 0.53, 0.40),
  vec3(0.45, 0.91, 0.20)
);

void PLUG_texture_color(inout vec4 texture_color,
  const in vec4 tex_coord)
{
  float[count] distances;

  int closest0, closest1;

  /* calculate 1st and 2nd distances first, to initialize closest */
  distances[0] = distance(vec3(tex_coord), feature_points[0]);
  distances[1] = distance(vec3(tex_coord), feature_points[1]);

  if (distances[0] < distances[1])
  {
    closest0 = 0;
    closest1 = 1;
  } else
  {
    closest0 = 1;
    closest1 = 0;
  }

  for (int i = 2; i < count; i ++)
  {
    vec3 d = vec3(tex_coord) - feature_points[i];
    distances[i] = dot(d, d); /* square of the actual distance */
    /* update closest0 */
    if (distances[i] < distances[closest0])
    {
      closest1 = closest0;
      closest0 = i;
    } else
    if (distances[i] < distances[closest1])
      closest1 = i;
  }

  texture_color.rgb = pow(sqrt(distances[closest1]) - sqrt(distances[closest0]), 0.25)
    * 2.0 * feature_colors[closest0 % 15];
}
"
        }
      }
      defaultTexCoord "BOUNDS3D"
    }
    textureTransform TextureTransform3D { translation 0 0 -0.1 }
  }
  geometry Teapot { manifold TRUE }
}
