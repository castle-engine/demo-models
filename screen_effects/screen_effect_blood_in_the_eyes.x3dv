#X3D V3.2 utf8
PROFILE Interchange

# Demo that passing uniform variables (animated TimeSensor.elapsedTime,
# texture node) to ScreenEffect shaders works.
# See http://castle-engine.sourceforge.net/x3d_extensions_screen_effects.php
# for ScreenEffect docs.

Background {
  skyColor 0.98 0.77 0.77
}

# Camera settings "encoded" in the VRML declaration below :
# direction 0 0.700684607028961 0.000241928064497
# up 0 -0.000345317530446 0.999999940395355
# gravityUp 0 0 1
Transform {
  translation 0.004618315026164 -94.837326049804687 6.33106803894043
  rotation 1 0 0 1.570796370506287
  children Viewpoint {
    position 0 0 0 # camera position is expressed by translation
    orientation 0 0 1 0
  }
}

NavigationInfo {
  type "WALK"
  speed 20
  avatarSize [ 0.5 4 ]
}

Inline { url "../castle/old/vrml_2/castle_with_lights.wrl" }

ScreenEffect { shaders DEF Shader ComposedShader {
  inputOutput SFNode bloodyTexture ImageTexture {
    url "../textures/blood_in_the_eyes.png"
    repeatS TRUE
    repeatT TRUE
  }
  inputOnly SFTime time
  language "GLSL"
  parts ShaderPart { type "FRAGMENT" url "data:text/plain,
uniform sampler2D bloodyTexture;
uniform float time;

const vec2 bloodyTextureSize = vec2(512.0, 512.0);

void main (void)
{
  gl_FragColor = screen_get_color(screen_position());
  vec2 bloodCoord = vec2(screen_position()) / bloodyTextureSize;
  /* different columns move down at slightly different speeds */
  /* float timeScale = mix(0.8, 1.2, (sin(screen_position().x / 10.0) + 1.0) / 2.0); */
  bloodCoord.t += time / 10.0;
  gl_FragColor = mix(gl_FragColor,
    gl_FragColor * texture2D(bloodyTexture, bloodCoord),
    /* Beware of crappy Radeon fglrx treatment of float consts */
    3.0 / 4.0);
  gl_FragColor.r *= 2.0;
}
" } } }

DEF Timer TimeSensor { stopTime 1 loop TRUE }
ROUTE Timer.elapsedTime TO Shader.time

# Start Timer when world is loaded (otherwise the elapsedTime
# would be huge at the start, and this is bad --- calculation using it
# are not precise).
# (We could use KambiNavigationInfo.timeOriginAtStart instead.)
DEF PS ProximitySensor { size 10000000 10000000 10000000 }
ROUTE PS.enterTime TO Timer.startTime
