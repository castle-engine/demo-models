#X3D V3.2 utf8
PROFILE Interchange

# "Film grain" (slight noise over the image) effect.
# See http://castle-engine.sourceforge.net/x3d_extensions_screen_effects.php
# for ScreenEffect docs.

Background {
#  skyColor 0.98 0.77 0.77
}

# Camera settings "encoded" in the VRML declaration below :
# direction 0 0.700684607028961 0.000241928064497
# up 0 -0.000345317530446 0.999999940395355
# gravityUp 0 0 1
Transform {
  translation 0.004618315026164 -94.837326049804687 6.33106803894043
  rotation 1 0 0 1.570796370506287
  children Viewpoint {
    position 0 0 0 # camera position is expressed by translation
    orientation 0 0 1 0
  }
}

NavigationInfo {
  type "WALK"
  speed 20
  avatarSize [ 0.5 4 ]
}

Inline { url "../castle/old/vrml_2/castle_with_lights.wrl" }

ScreenEffect { shaders DEF Shader ComposedShader {
  inputOutput SFNode grainTexture ImageTexture {
    url "../textures/noise1.png"
    repeatS TRUE
    repeatT TRUE
  }
  inputOnly SFTime time
  language "GLSL"
  parts ShaderPart { type "FRAGMENT" url "data:text/plain,
uniform sampler2D grainTexture;
uniform float time;

/* Larger values -> grain is more noticeable, 0 = no grain is visible */
const float strength = 0.04;
/* Larger values -> grain is \"smaller dots\" */
const float density = 10.0;

void main (void)
{
  gl_FragColor = screen_get_color(screen_position());

  /* Squeeze grainCoord into [0..1,0..1]. */
  int screen_size = max(screen_width, screen_height);
  vec2 grainCoord = density *
    vec2(screen_position()) /
    vec2(screen_size, screen_size);

  /* Grain changes constanly, to make the noisy effect.
     We could use a couple of textures (MovieTexture with noises),
     but we can also instead add semi-random shift to grainCoord
     to effectively get a different noise.

     I experimented with changing noise smoothly,
     e.g. in 0.25 of a second one noise changes into other.
     But it looks bad. Simply using random independent noise slice
     at each frame looks best.  */
  grainCoord += vec2(time * 789.0, time * 456.0);

  float grain = strength * (
    /* Take a couple of noise layers.
       It's best to use somewhat distorted weights (not just 2, 4...)
       for nice irregular but smooth effect. */
    (texture2D(grainTexture, grainCoord / 1.1).r +
     texture2D(grainTexture, grainCoord / 3.3).r)
     - 1.0 /* -0.5 for each noise layer */
  );

  gl_FragColor.rgb += vec3(grain);
}
" } } }

DEF Timer TimeSensor { stopTime 1 loop TRUE }
ROUTE Timer.elapsedTime TO Shader.time

# Start Timer when world is loaded (otherwise the elapsedTime
# would be huge at the start, and this is bad --- calculation using it
# are not precise).
# (We could use KambiNavigationInfo.timeOriginAtStart instead.)
DEF PS ProximitySensor { size 10000000 10000000 10000000 }
ROUTE PS.enterTime TO Timer.startTime
