#X3D V3.2 utf8
PROFILE Interchange

# Plane with water.
# - Uses RenderedTexture, ViewpointMirror and MIRROR-PLANE texture mapping
#   for reflections.
#   See https://castle-engine.io/x3d_extensions_mirror_plane.php
# - Uses MovieTexture with a sequence of PNG for animated bump map.
#
# To add a water to your game, you can use this file:
#
# - Make sure to copy this file, alongside with
#   ../baked_normals/ subdirectory.
#   You can change the relative path by changing MovieTexture.url in this file.
#
# - Probably remove the Inline node that includes water_simple_scene.x3d here.
#   In real game, you should add additional geometry using CGE component
#   TCastleScene. You can compose world from multiple TCastleScene instances.
#
# - Probably remove the "bindable" nodes in this file
#   (Viewpoint, NavigationInfo, Fog, Background).
#   In real game, you like setup camera/fog/background using CGE components
#   TCastleCamera, TCastleFog, TCastleBackground, not using X3D nodes.
#
# - You can adjust water parameters as you wish:
#   - You can adjust WaterTransform translation/scale/rotation,
#     to make the plane appear where you want it.
#   - You can adjust TextureCoordinate at the end,
#     to increase/decrease waves frequency.
#
# TODO: This version of the demo has some (fixable) shortcomings for now:
#
# - The baked normals texture is not seamless, and the seams are visible
#   if you look hard enough.
# - This doesn't perturb the reflection.

# ----------------------------------------------------------------------------
# Bindable nodes

# Generated by view3dscene.
# Use view3dscene "Clipboard -> Print Current Camera..." to generate X3D code like below.
# Camera settings "encoded" in the X3D declaration below :
#   position -0.11 1.72 -7.91
#   direction 0.15 0.00 0.99
#   up 0.00 1.00 0.00
#   gravityUp 0.00 1.00 0.00
Viewpoint {
  position -0.11271689087152481 1.7243608236312866 -7.9072012901306152
  orientation 0.00017233505786862224 -1 -0.000012710928785963915 2.9945995807647705
}

NavigationInfo {
  headlight FALSE # it's bright enough without the headlight already
  type [ "WALK", "ANY" ]
  speed 10
}

Background {
  backUrl "../../skies/foggy_sky_back.png"
  bottomUrl "../../skies/foggy_sky_bottom.png"
  frontUrl "../../skies/foggy_sky_front.png"
  leftUrl "../../skies/foggy_sky_left.png"
  rightUrl "../../skies/foggy_sky_right.png"
  topUrl "../../skies/foggy_sky_top.png"
}

# ----------------------------------------------------------------------------
# Inline the main geometry

Inline {
  url "water_simple_scene.x3d"
}

# ----------------------------------------------------------------------------
# Water surface

Collision {
  enabled FALSE
  children DEF WaterTransform Transform {
    translation -10 -0.1 -10 # move and scale it as you wish
    scale 20 20 20

    children Shape {
      shading "PHONG"
      appearance Appearance {
        shaders CommonSurfaceShader {
          alphaFactor 0.9 # opacity = 1 - transparency
          specularFactor 1 1 1
          shininessFactor 0.6
          diffuseTexture RenderedTexture {
            dimensions [ 2048 2048 3 ]
            viewpoint ViewpointMirror { }
            repeatS FALSE
            repeatT FALSE
            update "ALWAYS"
          }

          # TODO: These normals are not seamless, because forcing
          # procedurally-generated textures in Blender to be seamless
          # (when baked and repeated) requires some work:
          # https://blender.stackexchange.com/questions/26692/how-do-i-create-repeating-patterns-with-cycles-procedural-textures
          # (Pull requests to actually set it up in ../baked_normals/scene_for_baking.blend
          # are welcome!)

          normalTexture MovieTexture {
            url "../baked_normals/baked_normals_@counter(4).png"
            loop TRUE
          }
          normalTextureCoordinatesId 1
        }
      }
      geometry IndexedFaceSet {
        coord Coordinate {
          point [ 0 0 0, 0 0 1, 1 0 1, 1 0 0, ]
        }
        coordIndex [ 0 1 2 3 ]
        texCoord MultiGeneratedTextureCoordinate {
          texCoord [
            # generate texture coordinates
            # that match the texture produced by RenderedTexture and ViewpointMirror
            # (in diffuseTexture)
            TextureCoordinateGenerator {
              mode "MIRROR-PLANE"
            }
            # This is useful to make waves smaller/larger.
            TextureCoordinate {
              point [ 0 0, 0 10, 10 10, 10 0, ]
            }
          ]
        }
      }
    }
  }
}
