#X3D V3.2 utf8
PROFILE Interchange
COMPONENT Shaders:1

Transform {
  translation 0 0 0
  children [

    Shape {
      appearance DEF App1_WithTexture Appearance {
        texture ImageTexture  { url "../../textures/bricks2.jpg" }
        shaders [
          # We don't handle HLSL now, as we don't have Direct3D renderer.
          # TODO: Though https://github.com/Microsoft/ShaderConductor
          # could be a way to use HLSL even with OpenGL(ES) renderer.
          #
          # For now this is just to test that such ProgramShader is correctly parsed and ignored.
          DEF TestHLSL ProgramShader {
            language "HLSL"
            programs [
              ShaderProgram { type "VERTEX" }
              ShaderProgram { type "FRAGMENT" }
            ] }

          # Shader with deliberately incorrect source code.
          DEF TestGLSLIncorrect ComposedShader {
            language "GLSL"
            parts [
              ShaderPart { type "VERTEX" url "glsl_deliberately_incorrect.vs" }
              ShaderPart { type "FRAGMENT" url "../glsl/simple.fs" }
            ]
          }

          # Not existing source file for shader.
          DEF TestGLSLNotExisting ComposedShader {
            language "GLSL"
            parts [
              ShaderPart { type "VERTEX" url "glsl_not_existing.vs" }
            ]
          }

          # No shaders specified.
          DEF TestGLSLNoParts ComposedShader {
            language "GLSL"
            parts [ ]
          }

          # Incorrect type (SOMETHING-STRANGE), but after all this is
          # a GLSL program that may be used.
          DEF CompShader1 ComposedShader {
            language "GLSL"
            parts [
              ShaderPart { type "SOMETHING-STRANGE" url "../glsl/simple.vs" }
              ShaderPart { type "FRAGMENT" url "../glsl/negative.fs" }
            ]
          }
        ]
        material Material { }
      }
      geometry Sphere { }
    }

    Transform {
      translation 3 0 0
      children
        Shape {
          appearance USE App1_WithTexture
          geometry Box { }
        }
    }

    Transform {
      translation 6 0 0
      children
        Shape {
          appearance DEF App1_NoTexture Appearance {
            # Just like AppShaderTestWithTexture, but a little simplified.
            # CompShaderTest is reused, so it should be reused (even though
            # Appearance node is different).
            shaders USE CompShader1
            material Material { }
          }
          geometry Cylinder { }
        }
    }
  ]
}

Transform {
  translation 0 3 0
  children [

    Shape {
      appearance DEF App2_WithTexture Appearance {
        texture ImageTexture  { url "../../textures/bricks2.jpg" }
        shaders [
          # Vertex and fragment programs specified multiple times.
          DEF CompShader2 ComposedShader {
            language "GLSL"
            parts [
              ShaderPart { type "FRAGMENT" url "../glsl/simple.fs" }
              ShaderPart { type "FRAGMENT" url "../glsl/simple.fs" }
              ShaderPart { type "VERTEX" url "../glsl/simple.vs" }
              ShaderPart { type "FRAGMENT" url "../glsl/simple.fs" }
              ShaderPart { type "VERTEX" url "../glsl/simple.vs" }
            ]
          }
        ]
        material Material { }
      }
      geometry Sphere { }
    }

    Transform {
      translation 3 0 0
      children
        Shape {
          appearance USE App2_WithTexture
          geometry Box { }
        }
    }

    Transform {
      translation 6 0 0
      children
        Shape {
          appearance DEF App2_NoTexture Appearance {
            # Just like AppShaderTestWithTexture, but a little simplified.
            # CompShaderTest is reused, so it should be reused (even though
            # Appearance node is different).
            shaders USE CompShader2
            material Material { }
          }
          geometry Cylinder { }
        }
    }
  ]
}

# Test isSelected, isValid of X3DShaderNode. You can uncomment these
# and check with Castle Game Engine, other VRML browsers may
# not know non-standard Logger node.

# DEF L Logger { level 3 }

# ROUTE TestHLSL.isSelected TO L.write
# ROUTE TestHLSL.isValid TO L.write

# ROUTE TestGLSLIncorrect.isSelected TO L.write
# ROUTE TestGLSLIncorrect.isValid TO L.write

# ROUTE TestGLSLNotExisting.isSelected TO L.write
# ROUTE TestGLSLNotExisting.isValid TO L.write

# ROUTE TestGLSLNoParts.isSelected TO L.write
# ROUTE TestGLSLNoParts.isValid TO L.write

# ROUTE CompShader1.isSelected TO L.write
# ROUTE CompShader1.isValid TO L.write

# ROUTE CompShader2.isSelected TO L.write
# ROUTE CompShader2.isValid TO L.write
