#X3D V3.0 utf8
PROFILE Interchange

# ------------------------------------------------------------------------------
# Test non-unique node names are handled OK.
# In Castle Game Engine, we allow non-unique node names in both VRML and X3D
# (and we warn about them also in both VRML and X3D).
#
# Explanation:
#
# All VRML versions allow non-unique node names.
# Each DEF XXX overrides all previous ("previous" in lexical sense,
# i.e. normal order of tokens in the file) DEF XXX with the same XXX,
# thus hiding previous node name "XXX".
#
# Spec of VRML 97: ( https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/concepts.html#4.6.2 )
#
# """
# If multiple nodes are given the same name, each USE statement refers
# to the closest node with the given name preceding it in either the
# VRML file or prototype definition.
# """
#
# X3D doesn't allow them:
# https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-CD/Part01/concepts.html#DEFL_USESemantics
#
# """
# Node names shall be unique in the context within which the associated
# DEF keyword occurs.
# """
#
# One problem with non-unique names
# is when saving: you have to be very careful about the order of ROUTE, PROTO,
# normal nodes' declarations and pretty much everything else.
# Almost everything can use some node name. Even PROTOs interface
# declarations, or Script/shaders interface declarations depend
# on current node binding, as default values for SFNode/MFNode
# fields may modify/use node name binding by DEF/USE.
#
# This means that when reading and then writing VRML file, we have to be
# careful to use the same order, otherwise it could be impossible
# to keep the same DEF/USE sharing of nodes. (And for ROUTEs, it could
# be impossible at all to save them, since ROUTE always must be specified
# when appropriate node names are bound).
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Define yellow sphere under XXX name

DEF XXXTransform Transform {
  children [

    Transform {
      translation 0 2 0
      children [
        DEF XXXTouch TouchSensor { }
        Shape { geometry Text { string "yellow" } }
      ]
    }

    DEF XXX Shape {
      geometry Sphere { }
      appearance Appearance { material DEF XXXMat Material { diffuseColor 1 1 0 } }
    }
  ]
}

# This isn't really any sensible ROUTE, it's just to test keeping proper binding.
ROUTE XXXTouch.hitPoint_changed TO XXXTransform.translation

# ----------------------------------------------------------------------------
# Use yellow sphere from XXX name

PROTO YellowSphereByDefault [
  inputOutput MFNode node USE XXX
] {
  Group { children IS node }
}

# ----------------------------------------------------------------------------
# Define blue sphere under the same XXX name
# (should override previous name)

DEF XXXTransform Transform {
  translation 4 0 0
  children [

    Transform {
      translation 0 2 0
      children [
        DEF XXXTouch TouchSensor { }
        Shape { geometry Text { string "blue" } }
      ]
    }

    DEF XXX Shape {
      geometry Sphere { }
      appearance Appearance { material Material { diffuseColor 0 0 1 } }
    }
  ]
}

# This isn't really any sensible ROUTE, it's just to test keeping proper binding.
ROUTE XXXTouch.hitPoint_changed TO XXXTransform.translation

# ----------------------------------------------------------------------------
# Use blue sphere from XXX name

PROTO BlueSphereByDefault [
  inputOutput MFNode node USE XXX
] {
  Group { children IS node }
}

# ----------------------------------------------------------------------------
# Test PROTOs using XXX name

Transform {
  translation 8 0 0
  children [

    Transform {
      translation 0 2 0
      children Shape { geometry Text { string "yellow" } }
    }

    YellowSphereByDefault { }
  ]
}

Transform {
  translation 12 0 0
  children [

    Transform {
      translation 0 2 0
      children Shape { geometry Text { string "blue" } }
    }

    BlueSphereByDefault { }
  ]
}
