#X3D V3.2 utf8
PROFILE Interchange

EXTERNPROTO KambiNavigationInfo [
  inputOnly   SFBool   set_bind
  inputOutput MFFloat  avatarSize
  inputOutput SFBool   headlight
  inputOutput SFNode   metadata
  inputOutput SFFloat  speed
  inputOutput SFTime   transitionTime
  inputOutput MFString transitionType
  inputOutput MFString type
  inputOutput SFFloat  visibilityLimit
  outputOnly  SFTime   bindTime
  outputOnly  SFBool   isBound
  outputOnly  SFBool   transitionComplete
  initializeOnly SFBool  timeOriginAtLoad
  initializeOnly SFNode  octreeRendering
  initializeOnly SFNode  octreeDynamicCollisions
  initializeOnly SFNode  octreeVisibleTriangles
  initializeOnly SFNode  octreeStaticCollisions
] [ "urn:castle-engine.sourceforge.net:node:KambiNavigationInfo",
    "../../www/htdocs/fallback_prototypes.x3dv#KambiNavigationInfo"
    "http://castle-engine.sourceforge.net/fallback_prototypes.x3dv#KambiNavigationInfo"
]

# Labirynth that shows how "occlusion query" can be beneficial.
#
# Each block has bump map with normals and height, so you can activate
# steep parallax mapping by GLSL to make rendering each block somewhat
# expensive (more than it's bounding box rendered for occl query).
#
# Moreover, many blocks have "chinchilla" model, to have shapes with
# a lot of complexity and small size (ideal to be optimized by
# occlusion culling).

# Generated by view3dscene.
# Use view3dscene "Console -> Print Current Camera..." to generate VRML/X3D code like below.
# Camera settings "encoded" in the VRML/X3D declaration below :
#   direction -0.0079982690513134003 0.99996829032897949 4.2516088427646537E-8
#   up 3.2487679213488718E-9 -8.6204266835920862E-8 1
#   gravityUp 0 -4.3711388286737929E-8 1
Transform {
  translation 31.94904899597168 27.905370712280273 0.89999723434448242
  rotation 1 0 0 1.5707963705062866
  children DEF ViewAtChinchilla Viewpoint {
    position 0 0 0 # camera position is expressed by translation
    orientation -1.4927202585113264E-7 1.0000020265579224 0 0.0079935137182474136
  }
}

# Camera settings "encoded" in the VRML declaration below :
# direction -0.0562033988535404 -0.0569315180182457 -2.5840685147215936E-009
# up 3.1234645092581559E-008 -1.4800964898142865E-008 1
# gravityUp 0 -4.3711388286737929E-008 1
Transform {
  translation 91.500503540039063 91.688674926757813 0.899999976158142
  rotation 1 0 -0 1.5707963705062866
  children DEF FarFromChinchilla Viewpoint {
    position 0 0 0 # camera position is expressed by translation
    orientation -1.6994120555224868E-009 1 0 2.3626301288604736
  }
}

KambiNavigationInfo {
  type [ "FLY" "ANY" ]
  headlight TRUE
  avatarSize [ 0.1 1 ]
  speed 4
  octreeRendering KambiOctreeProperties {
#    leafCapacity 20
  }
}

Inline { url "regular_labirynth.x3d" }

# Dummy box, just to make bounding box of the scene larger,
# just to make octree nicer (otherwise we have a lot of duplication
# inside the octree, since we get very flat octree boxes)
DEF BoundingBox Transform {
  translation 42 42 0
  children Shape {
    geometry Box {
      size 1 1 104
    } } }

DEF Chin Transform {
  scale 2 2 2
  children Collision {
    enabled FALSE
    children Inline {
      url "regular_labirynth_chinchilla.wrl.gz" }
  }
}
Transform { translation  8 0 0 children USE Chin }
Transform { translation 16 0 0 children USE Chin }
Transform { translation 24 0 0 children USE Chin }
Transform { translation 32 0 0 children USE Chin }
Transform { translation 40 0 0 children USE Chin }

Transform { translation  0 8 0 children USE Chin }
Transform { translation  8 8 0 children USE Chin }
Transform { translation 16 8 0 children USE Chin }
Transform { translation 24 8 0 children USE Chin }
Transform { translation 32 8 0 children USE Chin }
Transform { translation 40 8 0 children USE Chin }

Transform { translation  0 16 0 children USE Chin }
Transform { translation  8 16 0 children USE Chin }
Transform { translation 16 16 0 children USE Chin }
Transform { translation 24 16 0 children USE Chin }
Transform { translation 32 16 0 children USE Chin }
Transform { translation 40 16 0 children USE Chin }

Transform { translation  0 24 0 children USE Chin }
Transform { translation  8 24 0 children USE Chin }
Transform { translation 16 24 0 children USE Chin }
Transform { translation 24 24 0 children USE Chin }
Transform { translation 32 24 0 children USE Chin }
Transform { translation 40 24 0 children USE Chin }

Transform { translation  0 32 0 children USE Chin }
Transform { translation  8 32 0 children USE Chin }
Transform { translation 16 32 0 children USE Chin }
Transform { translation 24 32 0 children USE Chin }
Transform { translation 32 32 0 children USE Chin }
Transform { translation 40 32 0 children USE Chin }

Transform { translation  0 40 0 children USE Chin }
Transform { translation  8 40 0 children USE Chin }
Transform { translation 16 40 0 children USE Chin }
Transform { translation 24 40 0 children USE Chin }
Transform { translation 32 40 0 children USE Chin }
Transform { translation 40 40 0 children USE Chin }
