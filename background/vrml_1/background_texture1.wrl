#VRML V1.0 ascii

# Basic test of Background node. All faces haves textures without any
# alpha channel. The Transform with rotation causes the up axis of the sky
# be in +Z direction (default VRML sky has up in +Y axis), this
# matches the orientation of included castle_with_lights.wrl.

Group{
  Separator {
    Rotation { rotation 1 0 0 1.57 }
    Background {

      # We use various file formats for sky (bmp, png, jpgm, ppm
      # and even rgbe) to test whether all is handled ok.
      # Note: using RGBE format for storing simple textures is usually
      # nonsense, it's here only to test view3dscene.

      # Test: "not_existing_texture" can't be loaded so
      # "../skies/sky_red_back.bmp" should be used instead.
      backUrl [ "not_existing_texture", "../../skies/sky_red_back.bmp" ]

      # Test : "../skies/sky_red_bottom.png" CAN be loaded so
      # "../textures/test_texture.png" should not used (it should not even be loaded).
      bottomUrl [ "../../skies/sky_red_bottom.png", "../../../textures/test_texture.png" ]

      frontUrl "../../skies/sky_red_front.jpg"
      leftUrl "../../skies/sky_red_left.ppm"
      rightUrl "../../skies/sky_red_right.rgbe"
      topUrl "../../skies/sky_red_top.png"
    }
  }
  
  # Camera settings "encoded" in the VRML declaration below :
  # direction 0 0.700684607028961 0.000241928064497
  # up 0 -0.000345317530446 0.999999940395355
  # gravityUp 0 0 1
  Separator {
    Transform {
      translation 0.004618315026164 -94.837326049804687 6.33106803894043
      rotation 1 0 0 1.570796370506287
    }
    PerspectiveCamera {
      position 0 0 0 # camera position is expressed by translation
      orientation 0 0 1 0
    }
  }

  WWWInline { name "../../castle/old/vrml_1/castle_with_lights.wrl" }
}
